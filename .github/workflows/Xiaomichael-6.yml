name: Xiaomichael-6
on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "CPU分支"
        required: true
        type: choice
        options:
          - 'sm8650'
          - 'sm8550'
          - 'sm8450'
          - 'sm8475'
          - 'sm7675'
        default: 'sm8650'
      FEIL:
        description: "手机型号"
        required: true
        type: choice
        options:
          - 'oneplus12_v'
          - 'oneplus12_u'
          - 'oneplus_ace3_pro_v'
          - 'oneplus_ace5'
          - 'oneplus_pad2_v'
          - 'oneplus_11_v'
          - 'oneplus_11_u'
          - 'oneplus_11_t'
          - 'oneplus_12r_v'
          - 'oneplus_ace2pro_v'
          - 'oneplus_ace3_v'
          - 'oneplus_open_v'
          - 'oneplus_10t_v'
          - 'oneplus_11r_v'
          - 'oneplus_ace2_v'
          - 'oneplus_ace_pro_v'
          - 'oneplus_10_pro_v'
          - 'oneplus_ace_3v_v'
          - ' '
        default: 'oneplus12_v'
      CPUD:
        description: "处理器代号"
        required: true
        type: choice
        options:
          - 'pineapple'
          - 'kalama'
          - 'waipio'
        default: 'pineapple'
      ANDROID_VERSION:
        description: "内核安卓版本"
        required: true
        type: choice
        options:
          - 'android14'
          - 'android13'
          - 'android12'
        default: 'android14'
      KERNEL_VERSION:
        description: "内核版本"
        required: true
        type: choice
        options:
          - '6.1'
          - '5.15'
          - '5.10'
        default: '6.1'
      lz4kd:
       description: "是否启用lz4kd"
       required: true
       type: boolean
       default: true
        
jobs:
  build:
    name: For ${{ github.event.inputs.FEIL }}
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_DIR: /home/runner/.ccache  
      CCACHE_MAXSIZE: 8G
    steps:
      - name: 🚀 Maximize build space (最大化构建空间)
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: 📦 Configure Git
        run: |
         git config --global user.name "bulid"
         git config --global user.email "2210077278@qq.com"

      - name: 📦 Install dependencies (安装依赖)
        run: |
         sudo apt update && sudo apt upgrade -y
         sudo apt install -y python3 git curl
         sudo apt install -y python3 git curl ccache
         
      - name: 📥 Restore ccache (恢复 ccache 缓存)
        uses: actions/cache@v3
        with:
          path: /home/runner/.ccache
          key: ccache-${{ runner.os }}-${{ github.ref }}
          restore-keys: |
            ccache-${{ runner.os }}-
            
      - name: 📥 Install repo tool
        run: |
         curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
         chmod a+x ~/repo
         sudo mv ~/repo /usr/local/bin/repo

      - name: 📥 Initialize repo and sync （克隆内核源码）
        run: |
         mkdir kernel_workspace && cd kernel_workspace
         repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b refs/heads/oneplus/${{ github.event.inputs.CPU }} -m ${{ github.event.inputs.FEIL }}.xml --depth=1
         repo sync
         rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
         rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"
         sed -i 's/ -dirty//g' kernel_platform/common/scripts/setlocalversion
         sed -i 's/ -dirty//g' kernel_platform/msm-kernel/scripts/setlocalversion
         sed -i 's/ -dirty//g' kernel_platform/external/dtc/scripts/setlocalversion
         sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' kernel_platform/common/scripts/setlocalversion
         sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' kernel_platform/msm-kernel/scripts/setlocalversion
         sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' kernel_platform/external/dtc/scripts/setlocalversion
         sed -i '$s|echo "\$res"|echo "-OKI-xiaoxiaow"|' kernel_platform/common/scripts/setlocalversion            
         sed -i '$s|echo "\$res"|echo "-OKI-xiaoxiaow"|' kernel_platform/msm-kernel/scripts/setlocalversion
         sed -i '$s|echo "\$res"|echo "-OKI-xiaoxiaow"|' kernel_platform/external/dtc/scripts/setlocalversion
          
      - name: ⚙️ Set up SukiSU Ultra (配置 SukiSU Ultra)
        run: |
          cd kernel_workspace/kernel_platform
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-dev
          cd ./KernelSU
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10606)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          export KSU_VERSION=$KSU_VERSION
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile
          
      - name: 🔧 Set up SUSFS
        run: |
          cd kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}
          git clone https://github.com/Xiaomichael/kernel_patches.git
          git clone https://github.com/ShirkNeko/SukiSU_patch.git
          cd kernel_platform
          # Copy SUSFS patches
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch ./common/
          cp ../kernel_patches/next/syscall_hooks.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          if [ "${{ github.event.inputs.lz4kd }}" == "true" ]; then
            # Copy lz4k from ShirkNeko
            cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux
            cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib
            cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto
            cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/
          fi
          
          cd ./common
          patch -p1 < 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch || true
          cp ../../kernel_patches/69_hide_stuff.patch ./
          patch -p1 -F 3 < 69_hide_stuff.patch
          patch -p1 -F 3 < syscall_hooks.patch
          if [ "${{ github.event.inputs.lz4kd }}" == "true" ]; then
            cp ../../SukiSU_patch/other/zram/zram_patch/${{ github.event.inputs.KERNEL_VERSION }}/lz4kd.patch ./
            patch -p1 -F 3 < lz4kd.patch || true
            cp ../../SukiSU_patch/other/zram/zram_patch/${{ github.event.inputs.KERNEL_VERSION }}/lz4k_oplus.patch ./
            patch -p1 -F 3 < lz4k_oplus.patch || true
          fi
          
      - name: 🔧 Add sched_ext
        run: |
         cd kernel_workspace/kernel_platform/
         git clone https://github.com/HanKuCha/sched_ext.git
         cp -r ./sched_ext/* ./common/kernel/sched
         rm -rf ./sched_ext/.git
         cd common/kernel/sched

      - name: 🔧 Apply new hook & Add configuration
        run: |
          cd kernel_workspace/kernel_platform
          # Add KSU configuration settings
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/gki_defconfig
          # Add VFS configuration settings
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig      
          # Add SUSFS configuration settings
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
          if [ "${{ github.event.inputs.lz4kd }}" == "true" ]; then
            # Add lz4kd
            echo "CONFIG_ZSMALLOC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_CRYPTO_LZ4HC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_CRYPTO_LZ4K=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_CRYPTO_LZ4KD=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_CRYPTO_842=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_CRYPTO_LZ4K_OPLUS=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_ZRAM_WRITEBACK=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          # Remove check_defconfig
          sed -i 's/check_defconfig//' ./common/build.config.gki
          
      - name: 🔨 Build Kernel (构建内核)
        run: |
          if [ "${{ github.event.inputs.KERNEL_VERSION }}" == "6.1" ]; then
            export PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r487747c/bin:$PATH"
            export PATH="/usr/lib/ccache:$PATH"
            sudo apt install libelf-dev
            cd kernel_workspace/kernel_platform/common
            make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC=clang RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole LD=ld.lld  HOSTLD=ld.lld O=out gki_defconfig all
          else
            cd kernel_workspace
            LTO=thin ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ github.event.inputs.CPUD }} gki
          fi
          
      - name: 📦 Package kernel to AnyKernel3 (打包内核到 AnyKernel3)
        run: |
          git clone https://github.com/Xiaomichael/AnyKernel3 --depth=1
          rm -rf ./AnyKernel3/.git
          dir1="kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-gki/dist/"
          dir2="kernel_workspace/kernel_platform/bazel-out/k8-fastbuild/bin/msm-kernel/${{ github.event.inputs.CPUD }}_gki_kbuild_mixed_tree/"
          dir3="kernel_workspace/kernel_platform/out/msm-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.CPUD }}-gki/dist/"
          dir4="kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-gki/gki_kernel/common/arch/arm64/boot/"
          dir5="kernel_workspace/kernel_platform/out/msm-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.CPUD }}-gki/gki_kernel/common/arch/arm64/boot/"
          target1="./AnyKernel3/"
          target2="./kernel_workspace/kernel"

          if find "$dir1" -name "Image" | grep -q "Image"; then
            image_path="$dir1"Image
          elif find "$dir2" -name "Image" | grep -q "Image"; then
            image_path="$dir2"Image
          elif find "$dir3" -name "Image" | grep -q "Image"; then
            image_path="$dir3"Image
          elif find "$dir4" -name "Image" | grep -q "Image"; then
            image_path="$dir4"Image
          elif find "$dir5" -name "Image" | grep -q "Image"; then
            image_path="$dir5"Image
          else
            image_path=$(find "./kernel_workspace/kernel_platform/common/out/" -name "Image" | head -n 1)
          fi

          if [ -n "$image_path" ] && [ -f "$image_path" ]; then
            mkdir -p "$dir1"
            if [ "$(realpath "$image_path")" != "$(realpath "$dir1"Image)" ]; then
              cp "$image_path" "$dir1"
            else
              echo "源文件与目标相同，跳过复制"
            fi
            cp "$dir1"Image ./AnyKernel3/Image
          else
            echo "未找到 Image 文件，构建可能失败"
            exit 1
          fi
         
      - name: 🛠️ KPM Patching Image Files (KPM 修补 Image 文件)
        run: |
          cd kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-gki/dist
          curl -LO https://github.com/ShirkNeko/SukiSU_KernelPatch_patch/releases/download/0.11-beta/patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f Image
          mv oImage Image
          cp Image $GITHUB_WORKSPACE/AnyKernel3/Image
          cp Image $GITHUB_WORKSPACE/kernel_workspace/kernel
         
      - name: 📤 Upload AnyKernel3 with lz4kd
        if: ${{ github.event.inputs.lz4kd == 'true' }}
        uses: actions/upload-artifact@v4
        with:
         name: AnyKernel3_SukiSU_Ultra_lz4kd_${{ env.KSUVER }}_${{ github.event.inputs.FEIL }}
         path: ./AnyKernel3/*
         
      - name: 📤 Upload AnyKernel3
        if: ${{ github.event.inputs.lz4kd != 'true' }}
        uses: actions/upload-artifact@v4
        with:
         name: AnyKernel3_SukiSU_Ultra_${{ env.KSUVER }}_${{ github.event.inputs.FEIL }}
         path: ./AnyKernel3/*
         
      - name: 📝 Find zram.ko & crypto_zstdn.ko
        if: ${{ github.event.inputs.lz4kd == 'true' }}
        run: |
          find -name zram.ko
          find -name crypto_zstdn.ko
          
      - name: 📤 Upload zram.ko
        if: ${{ github.event.inputs.lz4kd == 'true' }} || ${{ github.event.inputs.KERNEL_VERSION == '6.1' }} 
        uses: actions/upload-artifact@v4
        with:
          name: zram.ko
          path: ./kernel_workspace/kernel_platform/common/out/drivers/block/zram/zram.ko