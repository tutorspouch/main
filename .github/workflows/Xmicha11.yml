name: Xiaomichael-11
on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "CPUÂàÜÊîØ"
        required: true
        type: choice
        options:
          - 'sm8650'
          - 'sm8550'
          - 'sm8450'
          - 'sm8475'
          - 'sm7675'
        default: 'sm8650'
      FEIL:
        description: "ÊâãÊú∫ÂûãÂè∑"
        required: true
        type: choice
        options:
          - 'oneplus_12'
          - 'oneplus_ace3_pro'
          - 'oneplus_ace5'
          - 'oneplus_13r'
          - 'oneplus_pad2'
          - 'oneplus_pad_pro'
          - 'oneplus_11'
          - 'oneplus_12r'
          - 'oneplus_ace2_pro'
          - 'oneplus_ace3'
          - 'oneplus_open'
          - 'oneplus_10t'
          - 'oneplus_11r'
          - 'oneplus_ace2'
          - 'oneplus_ace_pro'
          - 'oneplus_10_pro'
          - 'oneplus_ace_3v'
        default: 'oneplus_12'
      CPUD:
        description: "Â§ÑÁêÜÂô®‰ª£Âè∑"
        required: true
        type: choice
        options:
          - 'pineapple'
          - 'kalama'
          - 'waipio'
        default: 'pineapple'
      ANDROID_VERSION:
        description: "ÂÜÖÊ†∏ÂÆâÂçìÁâàÊú¨"
        required: true
        type: choice
        options:
          - 'android14'
          - 'android13'
          - 'android12'
        default: 'android14'
      KERNEL_VERSION:
        description: "ÂÜÖÊ†∏ÁâàÊú¨"
        required: true
        type: choice
        options:
          - '6.1'
          - '5.15'
          - '5.10'
        default: '6.1'
        
jobs:
  build:
    name: For ${{ github.event.inputs.FEIL }}
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_DIR: /home/runner/.ccache  
      CCACHE_MAXSIZE: 8G
    steps:
      - name: üöÄ Maximize build space (ÊúÄÂ§ßÂåñÊûÑÂª∫Á©∫Èó¥)
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          
      - name: üì¶ Configure Git (ËÆæÁΩÆ‰∏ãËΩΩË¥¶Êà∑)
        run: |
         git config --global user.name "build"
         git config --global user.email "2210077278@qq.com"

      - name: üì¶ Install dependencies (ÂÆâË£Ö‰æùËµñ)
        run: |
         sudo apt update && sudo apt upgrade -y
         sudo apt install -y python3 git curl
         sudo apt install -y python3 git curl ccache
         
      - name: üì• Restore ccache (ÊÅ¢Â§ç ccache ÁºìÂ≠ò)
        uses: actions/cache@v3
        with:
          path: /home/runner/.ccache
          key: ccache-${{ runner.os }}-${{ github.ref }}
          restore-keys: |
            ccache-${{ runner.os }}-

      - name: üì• Install repo tool (‰∏ãËΩΩrepoÂ∑•ÂÖ∑)
        run: |
         curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
         chmod a+x ~/repo
         sudo mv ~/repo /usr/local/bin/repo

      - name: üì• Initialize repo and sync (ÂÖãÈöÜÂÜÖÊ†∏Ê∫êÁ†Å)
        run: |
         mkdir kernel_workspace && cd kernel_workspace
         repo init -u https://github.com/Xiaomichael/kernel_manifest.git -b refs/heads/oneplus/${{ github.event.inputs.CPU }} -m ${{ github.event.inputs.FEIL }}.xml --depth=1
         repo sync -c -j$(nproc --all) --no-tags --no-clone-bundle --force-sync
         rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
         rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"
         sed -i 's/ -dirty//g' kernel_platform/common/scripts/setlocalversion
         sed -i 's/ -dirty//g' kernel_platform/msm-kernel/scripts/setlocalversion
         sed -i 's/ -dirty//g' kernel_platform/external/dtc/scripts/setlocalversion
         sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' kernel_platform/common/scripts/setlocalversion
         sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' kernel_platform/msm-kernel/scripts/setlocalversion
         sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' kernel_platform/external/dtc/scripts/setlocalversion
         sed -i '$s|echo "\$res"|echo "-oki-xiaoxiaow"|' kernel_platform/common/scripts/setlocalversion            
         sed -i '$s|echo "\$res"|echo "-oki-xiaoxiaow"|' kernel_platform/msm-kernel/scripts/setlocalversion
         sed -i '$s|echo "\$res"|echo "-oki-xiaoxiaow"|' kernel_platform/external/dtc/scripts/setlocalversion
         
      - name: ‚öôÔ∏è Set up KernelSU Next (ÈÖçÁΩÆ KernelSU Next)
        run: |
         cd kernel_workspace/kernel_platform
         curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s next
         cd KernelSU-Next
         KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+" 10200)
         echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
         sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile
        
      - name: üîß Set up SUSFS (ÈÖçÁΩÆ SUSFS)
        run: |
           cd kernel_workspace
           git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}
           git clone https://github.com/Xiaomichael/kernel_patches.git
           cd kernel_platform
           cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch ./common/
           cp ../kernel_patches/next/syscall_hooks.patch ./common/
           cp ../kernel_patches/next/0001-kernel-implement-susfs-v1.5.8-KernelSU-Next-v1.0.8.patch ./KernelSU-Next/
           if [ "${{ github.event.inputs.KERNEL_VERSION }}" == "6.1" ]; then
             cp ../kernel_patches/zram/001-lz4.patch ./common/
             cp ../kernel_patches/zram/lz4armv8.S ./common/lib
             cp ../kernel_patches/zram/002-zstd.patch ./common/
           fi
           cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
           cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
           # Apply patches
           cd ./KernelSU-Next
           patch -p1 < --forward < 0001-kernel-implement-susfs-v1.5.8-KernelSU-Next-v1.0.8.patch || true
           cd ../common
           if [ "${{ github.event.inputs.KERNEL_VERSION }}" == "6.1" ]; then
             git apply -p1 < 001-lz4.patch || true
             patch -p1 < 002-zstd.patch || true
           fi
           patch -p1 < 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch || true
           cp ../../kernel_patches/69_hide_stuff.patch ./
           patch -p1 -F 3 < 69_hide_stuff.patch
           patch -p1 -F 3 < syscall_hooks.patch
           
      - name: üîß Apply new hook & Add configuration (ÈÖçÁΩÆ ‰∏Ä‰∫õÂÜÖÊ†∏ÂºÄÂÖ≥)
        run: |
            cd kernel_workspace/kernel_platform
            # Add KSU configuration settings
            echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_KPROBES_HOOK=n" >> ./common/arch/arm64/configs/gki_defconfig
            # Add SUSFS configuration settings
            echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
            # Add BBR
            echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_NET_SCH_FQ=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_BIC=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_WESTWOOD=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_HTCP=n" >> ./common/arch/arm64/configs/gki_defconfig
            sed -i 's/check_defconfig//' ./common/build.config.gki
         
      - name: üî® Build Kernel (ÊûÑÂª∫ÂÜÖÊ†∏)
        run: |
          if [ "${{ github.event.inputs.KERNEL_VERSION }}" == "6.1" ]; then
            export KBUILD_BUILD_TIMESTAMP="Wed May 29 07:25:40 UTC 2025"
            export PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r487747c/bin:$PATH"
            export PATH="/usr/lib/ccache:$PATH"
            sudo apt install libelf-dev
            cd kernel_workspace/kernel_platform/common
            make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC=clang RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole LD=ld.lld  HOSTLD=ld.lld O=out CONFIG_LTO_CLANG=y CONFIG_LTO_CLANG_THIN=y CONFIG_LTO_CLANG_FULL=n CONFIG_LTO_NONE=n gki_defconfig all
          else
            cd kernel_workspace
            LTO=thin ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ github.event.inputs.CPUD }} gki
          fi
         
      - name: üì¶ Package kernel to AnyKernel3 (ÊâìÂåÖÂÜÖÊ†∏Âà∞ AnyKernel3)
        run: |
          git clone https://github.com/Xiaomichael/AnyKernel3 --depth=1
          rm -rf ./AnyKernel3/.git
          dir1="kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-gki/dist/"
          dir2="kernel_workspace/kernel_platform/bazel-out/k8-fastbuild/bin/msm-kernel/${{ github.event.inputs.CPUD }}_gki_kbuild_mixed_tree/"
          dir3="kernel_workspace/kernel_platform/out/msm-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.CPUD }}-gki/dist/"
          dir4="kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-gki/gki_kernel/common/arch/arm64/boot/"
          dir5="kernel_workspace/kernel_platform/out/msm-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.CPUD }}-gki/gki_kernel/common/arch/arm64/boot/"
          dir6="kernel_workspace/kernel_platform/common/out/arch/arm64/boot/"
          target1="./AnyKernel3/"
          target2="./kernel_workspace/kernel"

          if find "$dir1" -name "Image" | grep -q "Image"; then
            image_path="$dir1"Image
          elif find "$dir2" -name "Image" | grep -q "Image"; then
            image_path="$dir2"Image
          elif find "$dir3" -name "Image" | grep -q "Image"; then
            image_path="$dir3"Image
          elif find "$dir4" -name "Image" | grep -q "Image"; then
            image_path="$dir4"Image
          elif find "$dir5" -name "Image" | grep -q "Image"; then
            image_path="$dir5"Image
          elif find "$dir6" -name "Image" | grep -q "Image"; then
            image_path="$dir6"Image
          else
            image_path=$(find "./kernel_workspace/kernel_platform/common/out/" -name "Image" | head -n 1)
          fi

          if [ -n "$image_path" ] && [ -f "$image_path" ]; then
            mkdir -p "$dir1"
            if [ "$(realpath "$image_path")" != "$(realpath "$dir1"Image)" ]; then
              cp "$image_path" "$dir1"
            else
              echo "Ê∫êÊñá‰ª∂‰∏éÁõÆÊ†áÁõ∏ÂêåÔºåË∑≥ËøáÂ§çÂà∂"
            fi
            cp "$dir1"Image ./AnyKernel3/Image
          else
            echo "Êú™ÊâæÂà∞ Image Êñá‰ª∂ÔºåÊûÑÂª∫ÂèØËÉΩÂ§±Ë¥•"
            exit 1
          fi

      - name: üì§ Upload AnyKernel3 lz4 & zstd (‰∏ä‰º† AnyKernel3)
        if: ${{ github.event.inputs.KERNEL_VERSION == '6.1' }}
        uses: actions/upload-artifact@v4
        with:
         name: AnyKernel3_KernelSU_Next_lz4_zstd_${{ env.KSUVER }}_${{ github.event.inputs.FEIL }}
         path: ./AnyKernel3/*
         
      - name: üì§ Upload AnyKernel3 (‰∏ä‰º† AnyKernel3)
        if: ${{ github.event.inputs.KERNEL_VERSION != '6.1' }}
        uses: actions/upload-artifact@v4
        with:
         name: AnyKernel3_KernelSU_Next_${{ env.KSUVER }}_${{ github.event.inputs.FEIL }}
         path: ./AnyKernel3/*