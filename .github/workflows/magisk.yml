name: Build and Release Kernel with Submodule

on:
  pull_request:
    branches:
      - main
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  DEBIAN_FRONTEND: noninteractive
  ROOT_DIR_PREFIX: "OP12-A15"
  BRANCH: "android14-6.1"

jobs:
  build-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code (with Submodules)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # For git describe
          submodules: 'recursive'  # Initializes and updates *existing* submodules

      - name: Free Disk Space & Update APT
        run: |
          set -euxo pipefail
          sudo rm -rf /usr/share/dotnet  # Free up space
          sudo apt-get update -qq && sudo apt-get install -qq curl
          curl -fsSL https://raw.githubusercontent.com/kou/arrow/e49d8ae15583ceff03237571569099a6ad62be32/ci/scripts/util_free_space.sh | bash

      - name: Setup Build Environment
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            python3-pip curl git zip unzip gcc g++ make ninja-build file bc bison flex libssl-dev libelf-dev wget \
            build-essential python3-dev python3-setuptools rsync ccache

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: Install Latest Pahole
        run: |
          set -euxo pipefail
          sudo apt-get remove --purge -y dwarves || true
          sudo apt-get install -y git build-essential libdw-dev zlib1g-dev
          git clone --recurse-submodules https://git.kernel.org/pub/scm/devel/pahole/pahole.git
          cd pahole
          cmake -B build .
          cmake --build build
          sudo cmake --install build

      - name: Setup Python and Repo Tool
        run: |
          set -euxo pipefail
          python3 -m pip install --upgrade pip
          pip3 install gitpython xmltodict
          mkdir -p "$HOME/bin"
          wget -O "$HOME/bin/repo" https://storage.googleapis.com/git-repo-downloads/repo
          chmod a+x "$HOME/bin/repo"
          echo "$HOME/bin" >> $GITHUB_PATH
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Configure Build Directory
        id: build_dir
        run: |
          set -euxo pipefail
          ROOT_DIR="${ROOT_DIR_PREFIX}-cabage-release"
          echo "ROOT_DIR=${ROOT_DIR}" >> $GITHUB_ENV
          BUILD_DIR="builds/${ROOT_DIR}"
          echo "BUILD_DIR=${BUILD_DIR}" >> $GITHUB_ENV
          mkdir -p "${BUILD_DIR}"
          echo "Build directory set to ${BUILD_DIR}"

      - name: Clone Required Repositories (External)
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          set -euxo pipefail
          git clone --recursive https://github.com/TheWildJames/AnyKernel3.git -b gki
          #git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android14-6.1
          #git clone https://github.com/cabagekiller/kernel_patches.git

      - name: Setup Kernel Source (Using repo)
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          set -euxo pipefail
          KERNEL_DIR="kernel_platform/oneplus12_v"
          echo "KERNEL_DIR=${KERNEL_DIR}" >> $GITHUB_ENV
          mkdir -p "${KERNEL_DIR}"
          cd "${KERNEL_DIR}"
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b oneplus/sm8650 -m oneplus12_v.xml --depth=1
          sync_attempts=3
          for i in $(seq 1 $sync_attempts); do
              repo sync -c -j"$(nproc)" --force-sync --no-clone-bundle --no-tags && break
              echo "Repo sync failed. Attempt $i of $sync_attempts"
              if [ $i -lt $sync_attempts ]; then sleep 60; fi
          done
          [ $? -eq 0 ] || { echo "Repo sync failed after multiple attempts."; exit 1; }
          rm -rf ./kernel_platform/common/android/abi_gki_protected_exports_*

      - name: Build Kernel
        working-directory: ${{ env.BUILD_DIR }}/${{ env.KERNEL_DIR }}/kernel_platform
        run: |
          set -euxo pipefail
          mkdir -p out
          start_time=$(date +%s)
          export PATH="/usr/lib/ccache:$PATH"
          ./build_with_bazel.py \
            -t pineapple gki \
            --jobs="$(nproc --all)" --verbose_failures --config=stamp \
            --user_kmi_symbol_lists=//msm-kernel:android/abi_gki_aarch64_qcom \
            --ignore_missing_projects -o "$(pwd)/out" || exit 1
          end_time=$(date +%s)
          build_time=$((end_time - start_time))
          echo "Kernel build time: $build_time seconds"

      - name: Create ZIP Package
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          set -euxo pipefail
          cd AnyKernel3 || exit 1
          ZIP_NAME="Cabage-OP12-SUSFS-$(date +'%Y-%m-%d-%H-%M-%S').zip"
          echo "Creating zip file $ZIP_NAME..."
          cp "${{ env.BUILD_DIR }}/${{ env.KERNEL_DIR }}/kernel_platform/out/dist/Image" . || { echo "Error copying Image file"; exit 1; }
          zip -r "../$ZIP_NAME" ./* || { echo "Error creating zip"; exit 1; }
          ls -lh "../$ZIP_NAME"
          echo "zip_name=$ZIP_NAME" >> $GITHUB_ENV
          cd ..

      - name: Set current timestamp
        id: timestamp
        run: echo "CURRENT_TIMESTAMP=$(date -u +'%Y.%m.%d-%H%M%S')" >> $GITHUB_ENV

      - name: Create Release (Only on Tag Push)
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ${{ env.BUILD_DIR }}/${{ env.zip_name }}
          tag_name: ${{ env.KSUVER }}-${{ env.ROOT_DIR_PREFIX }}
          name: Release ${{ env.ROOT_DIR_PREFIX }} ${{ env.zip_name }}
          body: |
             Release for ${{ env.ROOT_DIR_PREFIX }} based on branch ${{ env.BRANCH }}
             KSU Version: ${{ env.KSUVER }}
             Timestamp: ${{ env.CURRENT_TIMESTAMP }}

      - name: Upload Build Logs
        uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: build-logs
          path: |
            ${{ github.workspace }}/kernel_platform/out/*.log
            ${{ github.workspace }}/kernel_platform/**/*.rej
          retention-days: 5
          if-no-files-found: warn
